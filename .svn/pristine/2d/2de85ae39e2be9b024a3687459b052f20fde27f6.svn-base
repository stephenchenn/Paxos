import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.ServerSocket;
import java.net.Socket;

public class SocketServer extends Thread {
    private ServerSocket serverSocket;
    private int port;
    private boolean running = false;
    private Acceptor acceptor;

    public SocketServer(Acceptor acceptor, int port) {
        this.port = port;
        this.acceptor = acceptor;
    }

    public void startServer() {
        try {
            serverSocket = new ServerSocket(port);
            this.start();
            System.out.println("Server started on port: " + port);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public void stopServer() {
        running = false;
        this.interrupt();
    }

    @Override
    public void run() {
        running = true;
        while (running) {
            try {
                System.out.println("Listening for a connection");

                // Call accept() to receive the next connection
                Socket socket = serverSocket.accept();

                // Pass the socket to the RequestHandler thread for processing
                RequestHandler requestHandler = new RequestHandler(socket, acceptor);
                requestHandler.start();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }

    //String[] args
    // public void toStart() {
    //     // if (args.length == 0) {
    //     //     System.out.println("Usage: SocketServer <port>");
    //     //     System.exit(0);
    //     // }
    //     // int port = Integer.parseInt(args[0]);
    //     System.out.println("Start server on port: " + port);

    //     SocketServer server = new SocketServer(acceptor, port);
    //     server.startServer();

    //     // Automatically shutdown in 1 minute
    //     // try {
    //     //     Thread.sleep(10000);
    //     // } catch (Exception e) {
    //     //     e.printStackTrace();
    //     // }
    //     server.stopServer();
    // }
}

class RequestHandler extends Thread {
    private Socket socket;
    private Acceptor acceptor;

    RequestHandler(Socket socket, Acceptor acceptor) {
        this.socket = socket;
        this.acceptor = acceptor;
    }

    @Override
    public void run() {
        try {
            System.out.println("Server received a connection");

            // Get input and output streams
            BufferedReader in = new BufferedReader(new InputStreamReader(socket.getInputStream()));
            PrintWriter out = new PrintWriter(socket.getOutputStream());

            // Write out our header to the client
            // out.println("Echo Server 1.0");
            // out.flush();

            // Echo lines back to the client until the client closes the connection or we
            // receive an empty line
            int id = Integer.parseInt(in.readLine());
            String uid = in.readLine();
            // while (line != null && line.length() > 0) {
            //     // out.println("Echo: " + line);
            //     // out.flush();
            //     System.out.println(line);
            //     line = in.readLine();
            // }

            ProposalID proposalID = new ProposalID(id, uid);

            this.acceptor.receivePrepare(uid, proposalID);

            // Close our connection
            in.close();
            out.close();
            socket.close();

            System.out.println("Connection closed");
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}